// app/src/main/java/com/ccdyz/tools/ui/filemerger/FileMergerViewModel.kt
package com.ccdyz.tools.ui.filemerger

import android.content.Context
import android.net.Uri
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.ccdyz.tools.utils.FileUtils
import com.ccdyz.tools.utils.MergedFileProcessor
import kotlinx.coroutines.Job
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch
import android.content.Intent
import android.content.pm.PackageManager

enum class FileMergerTab { MERGE, SPLIT }
enum class ProcessingMode { MEMORY, STREAM }

data class FileInfo(
    val name: String,
    val size: Long,
    val mimeType: String?,
    val uri: Uri
)

data class OperationResult(
    val success: Boolean,
    val message: String,
    val outputFiles: List<OutputFile> = emptyList(),
    val errorDetails: String? = null
)

data class OutputFile(
    val name: String,
    val size: Long,
    val uri: Uri,
    val description: String,
    val folderPath: String? = null // Ê∑ªÂä†Êñá‰ª∂Â§πË∑ØÂæÑ
)

data class FileMergerUiState(
    val currentTab: FileMergerTab = FileMergerTab.MERGE,
    val developerMode: Boolean = false,

    // Êñá‰ª∂ÈÄâÊã©
    val videoFile: FileInfo? = null,
    val attachFile: FileInfo? = null,
    val mergedFile: FileInfo? = null,

    // Â§ÑÁêÜËÆæÁΩÆ
    val processingMode: ProcessingMode = ProcessingMode.MEMORY,

    // Â§ÑÁêÜÁä∂ÊÄÅ
    val isProcessing: Boolean = false,
    val progress: Float = 0f,
    val currentOperation: String = "",
    val processedSize: Long = 0L,
    val totalSize: Long = 0L,

    // ÁªìÊûú
    val operationResult: OperationResult? = null,

    // Ë∞ÉËØï‰ø°ÊÅØ
    val debugInfo: String = ""
)

class FileMergerViewModel : ViewModel() {

    private val _uiState = MutableStateFlow(FileMergerUiState())
    val uiState: StateFlow<FileMergerUiState> = _uiState.asStateFlow()

    private var processingJob: Job? = null
    private val processor = MergedFileProcessor()

    fun switchTab(tab: FileMergerTab) {
        _uiState.update { it.copy(currentTab = tab) }
        clearOperationResult()
    }

    fun toggleDeveloperMode() {
        val newMode = !_uiState.value.developerMode
        _uiState.update {
            it.copy(
                developerMode = newMode,
                debugInfo = if (newMode) {
                    buildString {
                        appendLine("üîß ÂºÄÂèëËÄÖË∞ÉËØïÊ®°ÂºèÂ∑≤ÂêØÁî®")
                        appendLine("üì± Â∫îÁî®ÁâàÊú¨: 1.0.0")
                        appendLine("üîß MERGEDv3Â§ÑÁêÜÂô®ÁâàÊú¨: 3.0")
                        appendLine("üíæ ÊîØÊåÅÁöÑÂ§ÑÁêÜÊ®°Âºè: ÂÜÖÂ≠òÊ®°Âºè, ÊµÅÂºèÊ®°Âºè")
                        appendLine("üéØ È≠îÊúØÂ≠óËäÇ: MERGEDv3 (4D 45 52 47 45 44 76 33)")
                        appendLine("üìä Â§¥ÈÉ®ÁªìÊûÑ: ËßÜÈ¢ëÊï∞ÊçÆ + ÈôÑ‰ª∂Êï∞ÊçÆ + ÂÖÉÊï∞ÊçÆ + È≠îÊúØÂ≠óËäÇ(ÁΩëÈ°µÁâàÂÖºÂÆπ)")
                        appendLine("‚è∞ ${java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss", java.util.Locale.getDefault()).format(java.util.Date())}")
                        appendLine("=".repeat(50))
                    }
                } else ""
            )
        }
        addDebugInfo("üîß ÂºÄÂèëÊ®°Âºè: ${if (newMode) "‚úÖ ÂêØÁî®" else "‚ùå ÂÖ≥Èó≠"}")
    }

    fun selectVideoFile(context: Context, uri: Uri) {
        viewModelScope.launch {
            try {
                addDebugInfo("üé¨ ÂºÄÂßãÈÄâÊã©ËßÜÈ¢ëÊñá‰ª∂...")
                addDebugInfo("üìç URI: $uri")

                val fileInfo = FileUtils.getFileInfo(context, uri)
                _uiState.update { it.copy(videoFile = fileInfo) }

                addDebugInfo("‚úÖ ËßÜÈ¢ëÊñá‰ª∂ÈÄâÊã©ÊàêÂäü:")
                addDebugInfo("  üìÅ Êñá‰ª∂Âêç: ${fileInfo.name}")
                addDebugInfo("  üìä Êñá‰ª∂Â§ßÂ∞è: ${formatBytes(fileInfo.size)}")
                addDebugInfo("  üè∑Ô∏è MIMEÁ±ªÂûã: ${fileInfo.mimeType ?: "Êú™Áü•"}")
                addDebugInfo("  üìç URI: ${fileInfo.uri}")

                updateProcessingMode()
            } catch (e: Exception) {
                val errorDetails = buildString {
                    appendLine("‚ùå ËßÜÈ¢ëÊñá‰ª∂ÈÄâÊã©Â§±Ë¥•")
                    appendLine("üìç URI: $uri")
                    appendLine("üêõ ÈîôËØØÁ±ªÂûã: ${e.javaClass.simpleName}")
                    appendLine("üí¨ ÈîôËØØÊ∂àÊÅØ: ${e.message}")
                    if (e.cause != null) {
                        appendLine("üîó Ê†πÊú¨ÂéüÂõ†: ${e.cause?.message}")
                    }
                }
                addDebugInfo(errorDetails)
            }
        }
    }

    fun selectAttachFile(context: Context, uri: Uri) {
        viewModelScope.launch {
            try {
                addDebugInfo("üìé ÂºÄÂßãÈÄâÊã©ÈôÑ‰ª∂Êñá‰ª∂...")
                addDebugInfo("üìç URI: $uri")

                val fileInfo = FileUtils.getFileInfo(context, uri)
                _uiState.update { it.copy(attachFile = fileInfo) }

                addDebugInfo("‚úÖ ÈôÑ‰ª∂Êñá‰ª∂ÈÄâÊã©ÊàêÂäü:")
                addDebugInfo("  üìÅ Êñá‰ª∂Âêç: ${fileInfo.name}")
                addDebugInfo("  üìä Êñá‰ª∂Â§ßÂ∞è: ${formatBytes(fileInfo.size)}")
                addDebugInfo("  üè∑Ô∏è MIMEÁ±ªÂûã: ${fileInfo.mimeType ?: "Êú™Áü•"}")
                addDebugInfo("  üìç URI: ${fileInfo.uri}")

                updateProcessingMode()
            } catch (e: Exception) {
                val errorDetails = buildString {
                    appendLine("‚ùå ÈôÑ‰ª∂Êñá‰ª∂ÈÄâÊã©Â§±Ë¥•")
                    appendLine("üìç URI: $uri")
                    appendLine("üêõ ÈîôËØØÁ±ªÂûã: ${e.javaClass.simpleName}")
                    appendLine("üí¨ ÈîôËØØÊ∂àÊÅØ: ${e.message}")
                    if (e.cause != null) {
                        appendLine("üîó Ê†πÊú¨ÂéüÂõ†: ${e.cause?.message}")
                    }
                }
                addDebugInfo(errorDetails)
            }
        }
    }

    fun selectMergedFile(context: Context, uri: Uri) {
        viewModelScope.launch {
            try {
                addDebugInfo("üîß ÂºÄÂßãÈÄâÊã©ÂêàÂπ∂Êñá‰ª∂...")
                addDebugInfo("üìç URI: $uri")

                val fileInfo = FileUtils.getFileInfo(context, uri)
                _uiState.update { it.copy(mergedFile = fileInfo) }

                addDebugInfo("‚úÖ ÂêàÂπ∂Êñá‰ª∂ÈÄâÊã©ÊàêÂäü:")
                addDebugInfo("  üìÅ Êñá‰ª∂Âêç: ${fileInfo.name}")
                addDebugInfo("  üìä Êñá‰ª∂Â§ßÂ∞è: ${formatBytes(fileInfo.size)}")
                addDebugInfo("  üè∑Ô∏è MIMEÁ±ªÂûã: ${fileInfo.mimeType ?: "Êú™Áü•"}")
                addDebugInfo("  üìç URI: ${fileInfo.uri}")

                // Ê£ÄÊµãÊòØÂê¶‰∏∫MERGEDv3Ê†ºÂºè
                addDebugInfo("üîç ÂºÄÂßãÊ†ºÂºèÊ£ÄÊµã...")
                val isV3Format = processor.detectMergedFormat(context, uri, ::addDebugInfo)
                addDebugInfo("üéØ Ê†ºÂºèÊ£ÄÊµãÁªìÊûú: ${if (isV3Format) "‚úÖ ÊúâÊïàÁöÑMERGEDv3Êñá‰ª∂" else "‚ùå ‰∏çÊòØMERGEDv3Ê†ºÂºè"}")
            } catch (e: Exception) {
                val errorDetails = buildString {
                    appendLine("‚ùå ÂêàÂπ∂Êñá‰ª∂ÈÄâÊã©Â§±Ë¥•")
                    appendLine("üìç URI: $uri")
                    appendLine("üêõ ÈîôËØØÁ±ªÂûã: ${e.javaClass.simpleName}")
                    appendLine("üí¨ ÈîôËØØÊ∂àÊÅØ: ${e.message}")
                    if (e.cause != null) {
                        appendLine("üîó Ê†πÊú¨ÂéüÂõ†: ${e.cause?.message}")
                    }
                }
                addDebugInfo(errorDetails)
            }
        }
    }

    fun selectProcessingMode(mode: ProcessingMode) {
        _uiState.update { it.copy(processingMode = mode) }
        addDebugInfo("üíæ ÊâãÂä®ÈÄâÊã©Â§ÑÁêÜÊ®°Âºè: ${mode.name}")
        addDebugInfo("  üìù Ê®°ÂºèËØ¥Êòé: ${when(mode) {
            ProcessingMode.MEMORY -> "ÂÜÖÂ≠òÊ®°Âºè - ÈÄÇÂêàÂ∞èÊñá‰ª∂ÔºåÈÄüÂ∫¶Âø´‰ΩÜÂç†Áî®ÂÜÖÂ≠òÂ§ö"
            ProcessingMode.STREAM -> "ÊµÅÂºèÊ®°Âºè - ÈÄÇÂêàÂ§ßÊñá‰ª∂ÔºåËäÇÁúÅÂÜÖÂ≠ò‰ΩÜÈÄüÂ∫¶Á®çÊÖ¢"
        }}")
    }

    fun startMerge(context: Context) {
        val state = _uiState.value
        val videoFile = state.videoFile ?: return
        val attachFile = state.attachFile ?: return

        processingJob = viewModelScope.launch {
            try {
                _uiState.update {
                    it.copy(
                        isProcessing = true,
                        progress = 0f,
                        currentOperation = "ÂáÜÂ§áÂêàÂπ∂...",
                        totalSize = videoFile.size + attachFile.size,
                        operationResult = null
                    )
                }

                addDebugInfo("üöÄ ÂºÄÂßãÊñá‰ª∂ÂêàÂπ∂Êìç‰Ωú")
                addDebugInfo("  üíæ Â§ÑÁêÜÊ®°Âºè: ${state.processingMode.name}")
                addDebugInfo("  üé¨ ËßÜÈ¢ëÊñá‰ª∂: ${videoFile.name} (${formatBytes(videoFile.size)})")
                addDebugInfo("  üìé ÈôÑ‰ª∂Êñá‰ª∂: ${attachFile.name} (${formatBytes(attachFile.size)})")
                addDebugInfo("  üìä È¢ÑËÆ°ËæìÂá∫Â§ßÂ∞è: ${formatBytes(videoFile.size + attachFile.size + 32)} (Âê´ÂÖÉÊï∞ÊçÆ)")

                val result = when (state.processingMode) {
                    ProcessingMode.MEMORY -> processor.mergeFilesMemory(
                        context = context,
                        videoUri = videoFile.uri,
                        attachUri = attachFile.uri,
                        onProgress = { progress, operation, processedSize ->
                            _uiState.update {
                                it.copy(
                                    progress = progress,
                                    currentOperation = operation,
                                    processedSize = processedSize
                                )
                            }
                        },
                        onDebug = ::addDebugInfo
                    )
                    ProcessingMode.STREAM -> processor.mergeFilesStream(
                        context = context,
                        videoUri = videoFile.uri,
                        attachUri = attachFile.uri,
                        onProgress = { progress, operation, processedSize ->
                            _uiState.update {
                                it.copy(
                                    progress = progress,
                                    currentOperation = operation,
                                    processedSize = processedSize
                                )
                            }
                        },
                        onDebug = ::addDebugInfo
                    )
                }

                _uiState.update {
                    it.copy(
                        isProcessing = false,
                        operationResult = result
                    )
                }

                addDebugInfo("üéâ ÂêàÂπ∂Êìç‰ΩúÂÆåÊàê: ${if (result.success) "‚úÖ ÊàêÂäü" else "‚ùå Â§±Ë¥•"}")
                if (result.success) {
                    // ‰øÆÂ§çÔºöÊòéÁ°ÆÊåáÂÆöÁ±ªÂûã‰ª•ÈÅøÂÖçÊ≠ß‰πâ
                    result.outputFiles.forEach { file: OutputFile ->
                        addDebugInfo("  üìÑ ËæìÂá∫Êñá‰ª∂: ${file.name} (${formatBytes(file.size)})")
                        addDebugInfo("  üìç Êñá‰ª∂Ë∑ØÂæÑ: ${file.uri}")
                    }
                } else {
                    addDebugInfo("  üí¨ Â§±Ë¥•ÂéüÂõ†: ${result.message}")
                }

            } catch (e: Exception) {
                _uiState.update {
                    it.copy(
                        isProcessing = false,
                        operationResult = OperationResult(
                            success = false,
                            message = "ÂêàÂπ∂Â§±Ë¥•: ${e.message}",
                            errorDetails = e.stackTraceToString()
                        )
                    )
                }
                addDebugInfo("ÂêàÂπ∂ÂºÇÂ∏∏: ${e.message}")
            }
        }
    }

    fun startSplit(context: Context) {
        val state = _uiState.value
        val mergedFile = state.mergedFile ?: return

        processingJob = viewModelScope.launch {
            try {
                _uiState.update {
                    it.copy(
                        isProcessing = true,
                        progress = 0f,
                        currentOperation = "ÂáÜÂ§áÊãÜÂàÜ...",
                        totalSize = mergedFile.size,
                        operationResult = null
                    )
                }

                addDebugInfo("üîß ÂºÄÂßãÊñá‰ª∂ÊãÜÂàÜÊìç‰Ωú")
                addDebugInfo("  üìÅ ÂêàÂπ∂Êñá‰ª∂: ${mergedFile.name} (${formatBytes(mergedFile.size)})")
                addDebugInfo("  üìç Êñá‰ª∂Ë∑ØÂæÑ: ${mergedFile.uri}")

                val result = processor.splitMergedFile(
                    context = context,
                    mergedUri = mergedFile.uri,
                    onProgress = { progress, operation, processedSize ->
                        _uiState.update {
                            it.copy(
                                progress = progress,
                                currentOperation = operation,
                                processedSize = processedSize
                            )
                        }
                    },
                    onDebug = ::addDebugInfo
                )

                _uiState.update {
                    it.copy(
                        isProcessing = false,
                        operationResult = result
                    )
                }

                addDebugInfo("üéâ ÊãÜÂàÜÊìç‰ΩúÂÆåÊàê: ${if (result.success) "‚úÖ ÊàêÂäü" else "‚ùå Â§±Ë¥•"}")
                if (result.success) {
                    // ‰øÆÂ§çÔºöÊòéÁ°ÆÊåáÂÆöÁ±ªÂûã‰ª•ÈÅøÂÖçÊ≠ß‰πâ
                    result.outputFiles.forEach { file: OutputFile ->
                        addDebugInfo("  üìÑ ËæìÂá∫Êñá‰ª∂: ${file.name} (${formatBytes(file.size)})")
                        addDebugInfo("  üìù Êñá‰ª∂ÊèèËø∞: ${file.description}")
                        addDebugInfo("  üìç Êñá‰ª∂Ë∑ØÂæÑ: ${file.uri}")
                    }
                } else {
                    addDebugInfo("  üí¨ Â§±Ë¥•ÂéüÂõ†: ${result.message}")
                }

            } catch (e: Exception) {
                _uiState.update {
                    it.copy(
                        isProcessing = false,
                        operationResult = OperationResult(
                            success = false,
                            message = "ÊãÜÂàÜÂ§±Ë¥•: ${e.message}",
                            errorDetails = e.stackTraceToString()
                        )
                    )
                }
                addDebugInfo("ÊãÜÂàÜÂºÇÂ∏∏: ${e.message}")
            }
        }
    }

    fun stopOperation() {
        processingJob?.cancel()
        _uiState.update {
            it.copy(
                isProcessing = false,
                currentOperation = "Â∑≤ÂèñÊ∂à"
            )
        }
        addDebugInfo("Áî®Êà∑ÂèñÊ∂àÊìç‰Ωú")
    }


    private fun updateProcessingMode() {
        val state = _uiState.value
        val videoSize = state.videoFile?.size ?: 0
        val attachSize = state.attachFile?.size ?: 0
        val totalSize = videoSize + attachSize

        addDebugInfo("üîÑ Ëá™Âä®Â§ÑÁêÜÊ®°ÂºèËØÑ‰º∞:")
        addDebugInfo("  üé¨ ËßÜÈ¢ëÊñá‰ª∂Â§ßÂ∞è: ${formatBytes(videoSize)}")
        addDebugInfo("  üìé ÈôÑ‰ª∂Êñá‰ª∂Â§ßÂ∞è: ${formatBytes(attachSize)}")
        addDebugInfo("  üìä ÊÄªÂ§ßÂ∞è: ${formatBytes(totalSize)}")

        // Ëá™Âä®ÈÄâÊã©Â§ÑÁêÜÊ®°Âºè
        val threshold = 1024 * 1024 * 1024L // 1GB
        if (totalSize > threshold) {
            _uiState.update { it.copy(processingMode = ProcessingMode.STREAM) }
            addDebugInfo("  üíæ Ëá™Âä®ÈÄâÊã©: ÊµÅÂºèÊ®°Âºè (Êñá‰ª∂Â§ßÂ∞è > 1GB)")
            addDebugInfo("  üìù ÂéüÂõ†: Â§ßÊñá‰ª∂‰ΩøÁî®ÊµÅÂºèÊ®°ÂºèÂèØ‰ª•ËäÇÁúÅÂÜÖÂ≠ò")
        } else {
            addDebugInfo("  üíæ ÂΩìÂâçÊ®°Âºè: ${_uiState.value.processingMode.name}")
            addDebugInfo("  üìù Âª∫ËÆÆ: Êñá‰ª∂ËæÉÂ∞èÔºåÂÜÖÂ≠òÊ®°ÂºèÂíåÊµÅÂºèÊ®°ÂºèÈÉΩÈÄÇÁî®")
        }
    }

    private fun clearOperationResult() {
        _uiState.update { it.copy(operationResult = null) }
    }

    private fun addDebugInfo(info: String) {
        if (!_uiState.value.developerMode) return

        val timestamp = java.text.SimpleDateFormat("HH:mm:ss.SSS", java.util.Locale.getDefault())
            .format(java.util.Date())
        val newInfo = "[$timestamp] $info"

        _uiState.update {
            it.copy(
                debugInfo = if (it.debugInfo.isBlank()) newInfo
                else "${it.debugInfo}\n$newInfo"
            )
        }
    }

    private fun formatBytes(bytes: Long): String {
        val kb = bytes / 1024.0
        val mb = kb / 1024.0
        val gb = mb / 1024.0

        return when {
            gb >= 1 -> "%.2f GB".format(gb)
            mb >= 1 -> "%.2f MB".format(mb)
            kb >= 1 -> "%.2f KB".format(kb)
            else -> "$bytes B"
        }
    }
}